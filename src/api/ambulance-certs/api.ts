/* tslint:disable */
/* eslint-disable */
/**
 * Waiting List Api
 * Ambulance Waiting List API
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: xmartinkao@stuba.sk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AddCertification200Response
 */
export interface AddCertification200Response {
    /**
     * The UUID of created certification
     * @type {string}
     * @memberof AddCertification200Response
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface Certification
 */
export interface Certification {
    /**
     * The certification ID
     * @type {string}
     * @memberof Certification
     */
    'id'?: string;
    /**
     * The certification name
     * @type {string}
     * @memberof Certification
     */
    'name': string;
    /**
     * The certification description
     * @type {string}
     * @memberof Certification
     */
    'description': string;
    /**
     * The authority that issued the certification
     * @type {string}
     * @memberof Certification
     */
    'authority': string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * The user ID
     * @type {string}
     * @memberof User
     */
    'id': string;
    /**
     * The user name
     * @type {string}
     * @memberof User
     */
    'name': string;
    /**
     * User\'s certification preview
     * @type {Array<UserCertification>}
     * @memberof User
     */
    'certifications': Array<UserCertification>;
}
/**
 * 
 * @export
 * @interface UserCertification
 */
export interface UserCertification {
    /**
     * The certification ID
     * @type {string}
     * @memberof UserCertification
     */
    'certification_id': string;
    /**
     * The expiration date of the certification
     * @type {string}
     * @memberof UserCertification
     */
    'expires_at': string;
    /**
     * The issue date of the certification
     * @type {string}
     * @memberof UserCertification
     */
    'issued_at': string;
}
/**
 * 
 * @export
 * @interface UserPost
 */
export interface UserPost {
    /**
     * The user ID
     * @type {string}
     * @memberof UserPost
     */
    'id'?: string;
    /**
     * The user name
     * @type {string}
     * @memberof UserPost
     */
    'name'?: string;
    /**
     * User\'s certification preview
     * @type {Array<UserCertification>}
     * @memberof UserPost
     */
    'certifications'?: Array<UserCertification>;
}

/**
 * AmbulanceStaffCertificationsApi - axios parameter creator
 * @export
 */
export const AmbulanceStaffCertificationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a new certification to the certificationl list
         * @summary Add a new certification
         * @param {Certification} certification Certification to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCertification: async (certification: Certification, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'certification' is not null or undefined
            assertParamExists('addCertification', 'certification', certification)
            const localVarPath = `/certifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(certification, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes a certification from the certification list
         * @summary Delete a certification
         * @param {string} certificationId ID of the certification to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCertification: async (certificationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'certificationId' is not null or undefined
            assertParamExists('deleteCertification', 'certificationId', certificationId)
            const localVarPath = `/certifications/{certificationId}`
                .replace(`{${"certificationId"}}`, encodeURIComponent(String(certificationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of all available certifications
         * @summary Get all certifications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCertifications: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/certifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of all hospital doctors
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update doctor\'s certifications
         * @summary Update a user
         * @param {string} userId ID of the user to update
         * @param {UserPost} userPost User to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (userId: string, userPost: UserPost, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateUser', 'userId', userId)
            // verify required parameter 'userPost' is not null or undefined
            assertParamExists('updateUser', 'userPost', userPost)
            const localVarPath = `/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userPost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AmbulanceStaffCertificationsApi - functional programming interface
 * @export
 */
export const AmbulanceStaffCertificationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AmbulanceStaffCertificationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds a new certification to the certificationl list
         * @summary Add a new certification
         * @param {Certification} certification Certification to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCertification(certification: Certification, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddCertification200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCertification(certification, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes a certification from the certification list
         * @summary Delete a certification
         * @param {string} certificationId ID of the certification to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCertification(certificationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCertification(certificationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a list of all available certifications
         * @summary Get all certifications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCertifications(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Certification>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCertifications(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a list of all hospital doctors
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update doctor\'s certifications
         * @summary Update a user
         * @param {string} userId ID of the user to update
         * @param {UserPost} userPost User to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(userId: string, userPost: UserPost, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(userId, userPost, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AmbulanceStaffCertificationsApi - factory interface
 * @export
 */
export const AmbulanceStaffCertificationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AmbulanceStaffCertificationsApiFp(configuration)
    return {
        /**
         * Adds a new certification to the certificationl list
         * @summary Add a new certification
         * @param {Certification} certification Certification to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCertification(certification: Certification, options?: any): AxiosPromise<AddCertification200Response> {
            return localVarFp.addCertification(certification, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes a certification from the certification list
         * @summary Delete a certification
         * @param {string} certificationId ID of the certification to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCertification(certificationId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteCertification(certificationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of all available certifications
         * @summary Get all certifications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCertifications(options?: any): AxiosPromise<Array<Certification>> {
            return localVarFp.getCertifications(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of all hospital doctors
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(options?: any): AxiosPromise<Array<User>> {
            return localVarFp.getUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * Update doctor\'s certifications
         * @summary Update a user
         * @param {string} userId ID of the user to update
         * @param {UserPost} userPost User to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(userId: string, userPost: UserPost, options?: any): AxiosPromise<User> {
            return localVarFp.updateUser(userId, userPost, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AmbulanceStaffCertificationsApi - interface
 * @export
 * @interface AmbulanceStaffCertificationsApi
 */
export interface AmbulanceStaffCertificationsApiInterface {
    /**
     * Adds a new certification to the certificationl list
     * @summary Add a new certification
     * @param {Certification} certification Certification to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceStaffCertificationsApiInterface
     */
    addCertification(certification: Certification, options?: AxiosRequestConfig): AxiosPromise<AddCertification200Response>;

    /**
     * Removes a certification from the certification list
     * @summary Delete a certification
     * @param {string} certificationId ID of the certification to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceStaffCertificationsApiInterface
     */
    deleteCertification(certificationId: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Retrieves a list of all available certifications
     * @summary Get all certifications
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceStaffCertificationsApiInterface
     */
    getCertifications(options?: AxiosRequestConfig): AxiosPromise<Array<Certification>>;

    /**
     * Retrieves a list of all hospital doctors
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceStaffCertificationsApiInterface
     */
    getUsers(options?: AxiosRequestConfig): AxiosPromise<Array<User>>;

    /**
     * Update doctor\'s certifications
     * @summary Update a user
     * @param {string} userId ID of the user to update
     * @param {UserPost} userPost User to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceStaffCertificationsApiInterface
     */
    updateUser(userId: string, userPost: UserPost, options?: AxiosRequestConfig): AxiosPromise<User>;

}

/**
 * AmbulanceStaffCertificationsApi - object-oriented interface
 * @export
 * @class AmbulanceStaffCertificationsApi
 * @extends {BaseAPI}
 */
export class AmbulanceStaffCertificationsApi extends BaseAPI implements AmbulanceStaffCertificationsApiInterface {
    /**
     * Adds a new certification to the certificationl list
     * @summary Add a new certification
     * @param {Certification} certification Certification to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceStaffCertificationsApi
     */
    public addCertification(certification: Certification, options?: AxiosRequestConfig) {
        return AmbulanceStaffCertificationsApiFp(this.configuration).addCertification(certification, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes a certification from the certification list
     * @summary Delete a certification
     * @param {string} certificationId ID of the certification to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceStaffCertificationsApi
     */
    public deleteCertification(certificationId: string, options?: AxiosRequestConfig) {
        return AmbulanceStaffCertificationsApiFp(this.configuration).deleteCertification(certificationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of all available certifications
     * @summary Get all certifications
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceStaffCertificationsApi
     */
    public getCertifications(options?: AxiosRequestConfig) {
        return AmbulanceStaffCertificationsApiFp(this.configuration).getCertifications(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of all hospital doctors
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceStaffCertificationsApi
     */
    public getUsers(options?: AxiosRequestConfig) {
        return AmbulanceStaffCertificationsApiFp(this.configuration).getUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update doctor\'s certifications
     * @summary Update a user
     * @param {string} userId ID of the user to update
     * @param {UserPost} userPost User to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceStaffCertificationsApi
     */
    public updateUser(userId: string, userPost: UserPost, options?: AxiosRequestConfig) {
        return AmbulanceStaffCertificationsApiFp(this.configuration).updateUser(userId, userPost, options).then((request) => request(this.axios, this.basePath));
    }
}


